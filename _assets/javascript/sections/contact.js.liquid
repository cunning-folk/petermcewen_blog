const YassssContact = {
  init: () => {
    YassssContact.watchButtonSubmission()
    return YassssContact.watchKeypressSubmission()
  },
  grabFormData: (formElement, dataType) => {
    const formData = new FormData(formElement)
    let returnData = null

    if (dataType === 'json') {
      const formDataObject = {}

      formData.forEach((value, key) => {
        formDataObject[key] = value
      })

      returnData = JSON.stringify(formDataObject)
    } else {
      returnData = new URLSearchParams(formData).toString()
    }

    return returnData
  },
  submitForm: (formElement, formAction) => {
    let contentType, formData, urlToCall
    const errorResult = (response, formActionWithError) => {
      console.log(`${formActionWithError} did not work`) // eslint-disable-line no-console
      return console.log(response) // eslint-disable-line no-console
    }
    const successResult = (response, formActionWithSuccess) => {
      const formElementWithSuccess = document.getElementById(`${formActionWithSuccess.replace('-', '_')}_form`)
      const formHolderElement = formElementWithSuccess.closest('.form-holder')
      const holderElement = formElementWithSuccess.closest('.holder')
      const messageElements = holderElement.querySelectorAll('.message')

      let bodyResponse = null
      if (response.bodyUsed) {
        bodyResponse = response.json()
      } else {
        bodyResponse = response.text()
      }

      if (formHolderElement) {
        formHolderElement.style.display = 'none'
      }

      if (bodyResponse.result !== 'error') {
        resetForm(formElementWithSuccess, formActionWithSuccess)
        return Array.prototype.forEach.call(messageElements, (el) => {
          const element = el
          element.removeAttribute('style')
        })
      } else if (bodyResponse.msg.toLowerCase().indexOf('already subscribed') >= 0) {
        resetForm(formElementWithSuccess, formActionWithSuccess)
        return Array.prototype.forEach.call(messageElements, (el) => {
          const element = el
          element.innerHTML = '<p>Thank you!</p><p>You’re all set!</p>'
          element.removeAttribute('style')
        })
      }
      // else
      let buttonText
      if (formActionWithSuccess === 'contact') {
        buttonText = 'Send message'
      } else {
        buttonText = 'Submit'
      }

      // show the form, if it was hidden
      formHolderElement.removeAttribute('style')

      // show error message
      const errorMessageElements = formElementWithSuccess.querySelectorAll('.error-message')
      Array.prototype.forEach.call(errorMessageElements, (el) => {
        const element = el
        element.textContent = bodyResponse.msg
        element.removeAttribute('style')
      })

      // reset form in-progress state
      formElementWithSuccess.classList.remove('in-progress')
      const submitButtonElements = formElementWithSuccess.querySelectorAll('.submit')
      return Array.prototype.forEach.call(submitButtonElements, (el) => {
        const element = el
        element.textContent = buttonText
      })
    }
    const resetForm = (formElementToReset, formActionToReset) => {
      const inputElements = formElementToReset.querySelectorAll('INPUT')
      const textAreaElements = formElementToReset.querySelectorAll('TEXTAREA')
      const submitButtonElements = formElementToReset.querySelectorAll('.submit')

      let buttonText
      if (formActionToReset === 'contact') {
        buttonText = 'Send message'
      } else {
        buttonText = 'Submit'
      }

      formElementToReset.classList.remove('in-progress')
      Array.prototype.forEach.call(submitButtonElements, (el) => {
        const element = el
        element.textContent = buttonText
      })
      Array.prototype.forEach.call(inputElements, (el) => {
        const element = el
        element.value = ''
      })
      Array.prototype.forEach.call(textAreaElements, (el) => {
        const element = el
        element.value = ''
        element.removeAttribute('style')
      })

      return null
    }

    if (!formElement.classList.contains('in-progress')) {
      const postData = (acceptType, method, url = '', data = {}) =>
        fetch(url, {
          method: method,
          mode: 'no-cors',
          headers: {
            Accept: acceptType,
            'Content-Type': contentType,
          },
          body: data, // body data type must match 'Content-Type' header
        })
          .then((response) => response)

      const errorMessageElements = formElement.querySelectorAll('.error-message')
      const submitButtonElements = formElement.querySelectorAll('.submit')

      Array.prototype.forEach.call(errorMessageElements, (el) => {
        const element = el
        element.style.display = 'none'
      })
      formElement.classList.add('in-progress')
      Array.prototype.forEach.call(submitButtonElements, (el) => {
        const element = el
        element.textContent = 'Please wait…'
      })

      let method, acceptType
      if (formAction === 'sign-up') {
        method = 'GET' // mailchimp has to be GET
        formData = YassssContact.grabFormData(formElement, 'json')
        urlToCall = `{{ site.mailchimp_url | replace: "/post?", "/post-json?" }}&c=?&EMAIL=${JSON.parse(formData).EMAIL}`
        acceptType = 'application/json'
        contentType = 'application/json; charset=utf-8'
        formData = null // GET cannot have body
      } else if (formAction === 'contact') {
        method = 'POST'
        formData = YassssContact.grabFormData(formElement, 'queryString')
        urlToCall = 'https://formcarry.com/s/{{ site.formcarry_form_id }}'
        acceptType = 'application/json'
        contentType = 'application/x-www-form-urlencoded; charset=utf-8'
      }
      return postData(acceptType, method, urlToCall, formData)
        .then((response) => successResult(response, formAction))
        .catch((error) => errorResult(error, formAction))
    }

    return null
  },
  preSubmitForm: (formElement) => {
    let formAction
    const validation = GBValidations.validate(formElement) // eslint-disable-line no-undef
    if (validation.check) {
      if (formElement.closest('.holder').classList.contains('sign-up-holder')) {
        formAction = 'sign-up'
      } else if (formElement.closest('.holder').classList.contains('contact-holder')) {
        formAction = 'contact'
      }
      return YassssContact.submitForm(formElement, formAction)
    }
    return null
  },
  watchButtonSubmission: () => {
    document.addEventListener('click', (e) => {
      if ((e.target.tagName === 'A' || e.target.tagName === 'BUTTON') && e.target.classList.contains('submit')) {
        e.preventDefault()

        const parentFormElement = e.target.closest('form')
        return YassssContact.preSubmitForm(parentFormElement)
      }
      return null
    }, false)
    return null
  },
  watchKeypressSubmission: () => {
    // stop forms from getting submitted naturally
    const contactFormElement = document.getElementById('contact_form')
    const signUpFormElement = document.getElementById('sign_up_form')

    if (contactFormElement) {
      contactFormElement.addEventListener('submit', (e) => {
        e.preventDefault()
      }, true)
    }

    if (signUpFormElement) {
      signUpFormElement.addEventListener('submit', (e) => {
        e.preventDefault()
      }, true)
    }

    document.addEventListener('keyup', (e) => {
      const activeElement = document.activeElement
      const activeFormElement = activeElement.closest('form')
      const key = e.key || e.keyCode

      if (key === 'Enter' || key === 13) {
        if ((activeElement.tagName !== 'TEXTAREA') &&
          (activeElement.tagName === 'INPUT')) {
          return YassssContact.preSubmitForm(activeFormElement)
        }
      }
      return null
    })
    return null
  },
}

ready(YassssContact.init) // eslint-disable-line no-undef
